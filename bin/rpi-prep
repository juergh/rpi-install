#!/bin/bash -eu
#
# Prepare a Raspberry Pi image
#

function out()
{
	rc=$?

	if [ -n "${BOOT_DIR}" ] ; then
		partumount "${BOOT_DIR}"
	fi
	if [ -n "${ROOT_DIR}" ] ; then
		partumount "${ROOT_DIR}"
	fi

	if [ "${rc}" -ne 0 ] ; then
        echo "-- Script failed" >&2
    fi
}

function usage()
{
	cat << EOF
Usage: rpi-prep [-d] [-h] IMAGE [INSTALLER]

Prepare a Raspberry Pi image.

Positional arguments:
  IMAGE        The image to prepare.
  INSTALLER    The installer tarball. If not provided, download and install
               the installer tarball from github.

Optional arguments:
  -d, --debug  Enable debug mode.
  -h, --help   Show this help text and exit.
EOF
}

debug=0
image=
installer=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-d|--debug)
			debug=1
			;;
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${image}" ] ; then
				image=${1}
			elif [ -z "${installer}" ] ; then
				installer=${1}
			else
				echo "-- Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${image}" ] ; then
	usage
	exit 2
fi

if [ -n "${installer}" ] && ! [ -e "${installer}" ] ; then
	echo "No such installer: ${installer}"
	exit 1
fi

outfile=${image##*/}
outfile=${outfile%.img*}+prep.img

case "${image}" in
	*.img.xz)
		echo "-- Decompress image"
		xzcat "${image}" > "${outfile}"
		;;
	*.img.zip)
		# Check the number of files in the zipped image
		num_files=$(zipinfo -1 "${image}" | wc -l)
		if [ "${num_files}" -ne 1 ] ; then
			echo "-- Invalid number of zipped files: ${num_files}" >&2
			exit 1
		fi
		echo "-- Unzip image"
		unzip -p "${image}" > "${outfile}"
		;;
	*.img)
		echo "-- Copy image"
		cp "${image}" "${outfile}"
		;;
	*)
		echo "-- Unsupported image file format" >&2
		exit 1
		;;
esac

ROOT_DIR=
BOOT_DIR=
trap out EXIT INT TERM HUP

num_parts=$(partx -g "${outfile}" | wc -l)
if [ "${num_parts}" -eq 1 ] ; then
	# Mount the boot partition
	BOOT_DIR=$(partmount -s "${outfile}" 1)
elif  [ "${num_parts}" -eq 2 ] ; then
	# Mount the root partition
	ROOT_DIR=$(partmount -s "${outfile}" 2)
	# Mount the boot partition
	if [ -d "${ROOT_DIR}"/boot/firmware ] ; then
		boot_dir=${ROOT_DIR}/boot/firmware
	elif [ -d "${ROOT_DIR}"/boot ] ; then
		boot_dir=${ROOT_DIR}/boot
	else
		echo "-- No such boot directory: ${ROOT_DIR}/boot{/firmware,}" >&2
		exit 1
	fi
	BOOT_DIR=$(partmount -s "${outfile}" 1 "${boot_dir}")
else
	echo "-- Unsupported number of partitions: ${num_parts}" >&2
	exit 1
fi

here=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)

# Install the Raspberry Pi installer
opts=()
if [ -n "${installer}" ] ; then
	opts+=("${installer}")
fi
sudo "${here}"/rpi-install --boot "${BOOT_DIR}" "${opts[@]}"

# Configure the system
if [ -n "${ROOT_DIR}" ] ; then
	sudo "${here}"/rpi-config --root "${ROOT_DIR}"
fi

# Enter debug mode if requested
if [ "${debug}" -eq 1 ] ; then
	echo "-- Enter debug mode (type 'exit' to continue)"
	sudo chroot "${ROOT_DIR}"
fi

# Unmount the partitions
partumount "${BOOT_DIR}"
BOOT_DIR=
if [ -n "${ROOT_DIR}" ] ; then
	partumount "${ROOT_DIR}"
	ROOT_DIR=
fi

# Gzip the image
echo "-- Compress image"
gzip -f -S .gz "${outfile}"

echo "-- Created image ${outfile}.gz"

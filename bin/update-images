#!/bin/bash -eu
#
# Update and push Raspberry Pi images
#

function update_distro()
{
	local distro=${1} release=${2} flavor=${3}
	local releases flavors image_tmpl arch image

	case "${distro}" in
		ubuntu)
			releases=("bionic" "focal" "hirsute" "impish")
			flavors=("server" "desktop")
			image_tmpl="\${release}-\${flavor}-\${arch}+raspi.img.xz"
			dist_tmpl="\${release}-\${flavor}"
			;;
		core)
			releases=("16" "18" "20" "22")
			flavors=("")
			image_tmpl="core-\${release}-\${arch}+raspi.img.xz"
			dist_tmpl="core\${release}"
			;;
		raspios)
			releases=("")
			flavors=("lite" "full" "desktop")
			image_tmpl="raspios-\${flavor}-\${arch}.img.zip"
			dist_tmpl="raspios-\${flavor}"
			;;
		*)
			echo "Error: Invalid distro: ${distro}" >&2
			exit 1
			;;
	esac

	if [ -n "${release}" ] ; then
		releases=("${release}")
	fi
	if [ -n "${flavor}" ] ; then
		flavors=("${flavor}")
	fi

	for release in "${releases[@]}" ; do
		for flavor in "${flavors[@]}" ; do
			for arch in arm64 armhf ; do
				export release flavor arch
				image=$(echo "${image_tmpl}" | envsubst)
				dist=$(echo "${dist_tmpl}" | envsubst)
				image_prep=${image%.img.*}+prep.img.gz
				image_link=${image%%.*}
				image_link=${image_link%+raspi*}

				if [ "${DRY_RUN}" -eq 1 ] ; then
					if download-image -d "${dist}" "${arch}" >/dev/null 2>&1; then
						echo "    FOUND: ${image} (${image_link})"
					else
						echo "NOT FOUND: ${image}"
					fi
					continue
				fi

				if download-image "${dist}" "${arch}" "${image}" && \
				   prepare-image "${image}" "${image_prep}" ; then
					echo "-- Upload image"
					scp "${image_prep}" 192.168.99.11:/srv/images/"${distro}"/
					ssh 192.168.99.11 ln -sf "${distro}"/"${image_prep}" \
						/srv/images/"${image_link}"
				fi
			done
		done
	done
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-d] [-f FLAVOR] [-h] [-r RELEASE] [DISTRO [DISTRO...]]

Download, prepare and publish all Raspberry Pi images.

Positional arguments:
  DISTRO                 OS Distribution: ubuntu, core, raspios

Optional arguments:
  -d, --dry-run          Check if a remote image exists but don't download,
                         prepare and publish it.
  -f, --flavor FLAVOR    Distribution flavor:
                           ubuntu: server, desktop
                           raspio: lite, desktop, full
  -h, --help             Show this help text and exit.
  -r, --release RELEASE  Distribution release:
                           ubuntu: bionic, focal, hirsute, ...
                           core:   16, 18, 20, ...
EOF
}

here=$(dirname "$(readlink -f "${0}")")
PATH=${here}:${PATH}

DRY_RUN=0
flavor=
release=
distros=("ubuntu" "core" "raspios")

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-d|--dry-run)
			DRY_RUN=1
			;;
		-f|--flavor)
			shift
			flavor=${1}
			;;
		-h|--help)
			usage
			exit
			;;
		-r|--release)
			shift
			release=${1}
			;;
		-*)
			echo "Error: Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			distros=("${@}")
			break
			;;
	esac
	shift
done

for distro in "${distros[@]}" ; do
	update_distro "${distro}" "${release}" "${flavor}"
done

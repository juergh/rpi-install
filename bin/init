#!/bin/sh
#
# Download and install a Raspberry Pi image from a Bottle-Pi API server
#

BOTTLE_PI_HOST=192.168.99.11:5000

install_image()
{
	rm -f .fail
	{
		/usr/bin/wget -O - "${1}" || touch .fail
	} | {
		/usr/bin/"${2}" -cd || touch .fail
	} | {
		/bin/dd of="${3}" bs=4k conv=fsync status=none || touch .fail
	}
	if [ -e .fail ] ; then
		return 1
	fi
}

echo "-- Run installer"

/bin/busybox --install /bin

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
[ -d /boot ] || mkdir /boot
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

mount -t devtmpfs -o nosuid,mode=0755 udev /dev
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

mkdir -p /etc /var/lib/dhcp /var/run
touch /etc/fstab

echo "-- Load kernel modules"
depmod
modprobe r8152
modprobe uas

echo "-- Wait for /dev/mmcblk0p1 or /dev/sda1"
for _ in $(seq 10) ; do
	if [ -b /dev/mmcblk0p1 ] ; then
		boot_dev=/dev/mmcblk0
		boot_part=/dev/mmcblk0p1
		break
	elif [ -b /dev/sda1 ] ; then
		boot_dev=/dev/sda
		boot_part=/dev/sda1
		break
	fi
    sleep .5
done

echo "-- Clear installer boot flag on ${boot_part}"
if mount "${boot_part}" /boot ; then
	sed -i 's,^# rpi-install ONCE ,,' /boot/config.txt
	umount /boot
fi

echo "-- Wait for /sys/class/net/eth0"
for _ in $(seq 10) ; do
	[ -e /sys/class/net/eth0 ] && break
	sleep .5
done

echo "-- Get an IP"
dhclient -v

echo "-- Query Bottle-Pi host ${BOTTLE_PI_HOST}"
# shellcheck disable=SC2002
serial=$(cat /proc/device-tree/serial-number | tr -d '\0\n')
resp=$(/usr/bin/wget -q -O - "http://${BOTTLE_PI_HOST}/redfish/v1/Systems/${serial}/Actions/ComputerSystem.Update" | tr -d '\n\t ')
# Extract the update status from the response
status=${resp#*\"Status\":\"}
status=${status%%\"*}
if [ "${status}" = "Pending" ] ; then
	# Extract the Image name from the respone
	image=${resp#*\"Image\":\"}
	image=${image%%\"*}
	if [ -n "${image}" ] ; then
		# Clear the pending update
		/usr/bin/wget -q -O - "http://${BOTTLE_PI_HOST}/redfish/v1/Systems/${serial}/Actions/ComputerSystem.Update.Delete"
	fi
fi

# 'Fix' 'Workqueue: events_freezable mmc_rescan' errors
sysctl -w vm.dirty_background_ratio=5
sysctl -w vm.dirty_ratio=10

# Run the interactive installer
while true ; do
	if [ -n "${image}" ] ; then
		image_url="http://${BOTTLE_PI_HOST}/redfish/v1/Images/${image#/redfish/v1/Images/}"
		echo "-- Install image ${image_url} on ${boot_dev}"
		fail=0
		if ! install_image "${image_url}" gzip "${boot_dev}" ; then
			if ! install_image "${image_url}" xz "${boot_dev}" ; then
				fail=1
			fi
		fi
		if [ ${fail} -eq 1 ] ; then
			echo "-- Failed to install image"
		else
			echo "-- Image installed, rebooting..."
			sync
			reboot -f
		fi
	fi

	cat <<__EOF__

-- Select an image to install on ${boot_dev}

      0) Jammy   - Server - arm64
      1) Jammy   - Server - armhf
      2) Impish  - Server - arm64
      3) Impish  - Server - armhf
      4) Focal   - Server - arm64
      5) Focal   - Server - armhf
      6) Bionic  - Server - arm64
      7) Bionic  - Server - armhf

     10) Jammy   - Desktop - arm64
     11) Impish  - Desktop - arm64

     20) Core22 - arm64
     21) Core22 - armhf
     22) Core20 - arm64
     23) Core20 - armhf
     24) Core18 - arm64
     25) Core18 - armhf
     26) Core16 - armhf

     30) Raspberry Pi OS - Lite    - arm64
     31) Raspberry Pi OS - Lite    - armhf
     32) Raspberry Pi OS - Desktop - arm64
     33) Raspberry Pi OS - Desktop - armhf
     34) Raspberry Pi OS - Full    - arm64
     35) Raspberry Pi OS - Full    - armhf

     90) Run a shell
     91) Enter an image name manually
     92) Change the installation target device
     99) Reboot

__EOF__

	# shellcheck disable=SC2039
	echo -n "-- Choice: "
	read -r tmp

	image=
	case "${tmp}" in
		#
		# Ubuntu Server
		#
		0) image=jammy-server-arm64 ;;
		1) image=jammy-server-armhf ;;
		2) image=impish-server-arm64 ;;
		3) image=impish-server-armhf ;;
		4) image=focal-server-arm64 ;;
		5) image=focal-server-armhf ;;
		6) image=bionic-server-arm64 ;;
		7) image=bionic-server-armhf ;;

		#
		# Ubuntu Desktop
		#
		10) image=jammy-desktop-arm64 ;;
		11) image=impish-desktop-arm64 ;;

		#
		# Ubuntu Core
		#
		20) image=core-22-arm64 ;;
		21) image=core-22-armhf ;;
		22) image=core-20-arm64 ;;
		23) image=core-20-armhf ;;
		24) image=core-18-arm64 ;;
		25) image=core-18-armhf ;;
		26) image=core-16-armhf ;;

		#
		# Raspberry Pi OS
		#
		30) image=raspios-lite-arm64 ;;
		31) image=raspios-lite-armhf ;;
		32) image=raspios-desktop-arm64 ;;
		33) image=raspios-desktop-armhf ;;
		34) image=raspios-full-arm64 ;;
		35) image=raspios-full-armhf ;;

		#
		# Misc options
		#
		90)
			/bin/sh
			;;
		91)
			# shellcheck disable=SC2039
			echo -n "-- Image name: "
			read -r image
			;;
		92)
			# shellcheck disable=SC2039
			echo -n "-- Boot device: "
			read -r boot_dev
			;;
		99)
			sync
			reboot -f
			;;

		#
		# Default
		#
		*)
			;;
	esac
done

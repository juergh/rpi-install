#!/bin/sh
#
# Download and install a Raspberry Pi image from a Bottle-Pi API server
#

BOTTLE_PI_HOST=192.168.99.11:5000

echo "-- Run installer"

/bin/busybox --install /bin

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
[ -d /boot ] || mkdir /boot
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

mount -t devtmpfs -o nosuid,mode=0755 udev /dev
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

mkdir -p /etc /var/lib/dhcp /var/run
touch /etc/fstab

echo "-- Wait for /dev/mmcblk0p1"
# shellcheck disable=SC2034
for i in $(seq 10) ; do
	[ -b /dev/mmcblk0p1 ] && break
    sleep .5
done

echo "-- Mount /dev/mmcblk0p1"
if mount /dev/mmcblk0p1 /boot ; then
	# Clear the one-time boot flag
	sed -i 's,^# rpi-install ONCE ,,' /boot/config.txt

	echo "-- Unmount /dev/mmcblk0p1"
	sync
	umount /boot
fi

echo "-- Load kernel modules"
depmod
modprobe r8152

echo "-- Wait for /sys/class/net/eth0"
# shellcheck disable=SC2034
for i in $(seq 10) ; do
	[ -e /sys/class/net/eth0 ] && break
	sleep .5
done

echo "-- Get an IP"
dhclient -v

echo "-- Query Bottle-Pi host ${BOTTLE_PI_HOST}"
# shellcheck disable=SC2002
serial=$(cat /proc/device-tree/serial-number | tr -d '\0\n')
data=$(/usr/bin/wget -q -O - "http://${BOTTLE_PI_HOST}/redfish/v1/Systems/${serial}/Actions/ComputerSystem.Update" | \
	   tr -d '\n' | \
	   sed 's,":\s*",":",g')
# Extract the update status from the response
status=${data#*\"Status\":\"}
status=${status%%\"*}
if [ "${status}" = "Pending" ] ; then
	# Extract the Image name from the respone
	image=${data#*\"Image\":\"}
	image=${image%%\"*}
	if [ -n "${image}" ] ; then
		# Clear the pending update
		/usr/bin/wget -q -O - "http://${BOTTLE_PI_HOST}/redfish/v1/Systems/${serial}/Actions/ComputerSystem.Update.Delete"
	fi
fi

# 'Fix' 'Workqueue: events_freezable mmc_rescan' errors
sysctl -w vm.dirty_background_ratio=5
sysctl -w vm.dirty_ratio=10

# Run the interactive installer
while true ; do
	if [ -n "${image}" ] ; then
		image_url="http://${BOTTLE_PI_HOST}/redfish/v1/Images/${image#/redfish/v1/Images/}"
		echo "-- Install image ${image_url}"
		if /usr/bin/wget -O - "${image_url}" | /usr/bin/gzip -cd > /dev/mmcblk0 ; then
			sync
			reboot -f
		fi
	fi

	cat <<__EOF__

-- Select an image to install

      1) Hirsute - arm64
      2) Hirsute - armhf
      3) Groovy  - arm64
      4) Groovy  - armhf
      5) Focal   - arm64
      6) Focal   - armhf
      7) Bionic  - arm64
      8) Bionic  - armhf

     10) Core20 - arm64
     11) Core20 - armhf
     12) Core18 - arm64
     13) Core18 - armhf
     14) Core16 - arm64
     15) Core16 - armhf

     20) Raspberry Pi OS Lite - arm64
     21) Raspberry Pi OS Lite - armhf

     90) Run a shell
     91) Enter an image name manually
     99) Reboot

__EOF__

	# shellcheck disable=SC2039
	echo -n "-- Choice: "
	read -r tmp

	image=
	case "${tmp}" in
		#
		# Ubuntu Server
		#
		1) image=ubuntu-hirsute-arm64 ;;
		2) image=ubuntu-hirsute-armhf ;;
		3) image=ubuntu-groovy-arm64  ;;
		4) image=ubuntu-groovy-armhf  ;;
		5) image=ubuntu-focal-arm64   ;;
		6) image=ubuntu-focal-armhf   ;;
		7) image=ubuntu-bionic-arm64  ;;
		8) image=ubuntu-bionic-armhf  ;;

		#
		# Ubuntu Core
		#
		10) image=ubuntu-core20-arm64 ;;
		11) image=ubuntu-core20-armhf ;;
		12) image=ubuntu-core18-arm64 ;;
		13) image=ubuntu-core18-armhf ;;
		14) image=ubuntu-core16-arm64 ;;
		15) image=ubuntu-core16-armhf ;;

		#
		# Raspberry Pi OS
		#
		20) image=raspios-lite-arm64 ;;
		21) image=raspios-lite-armhf ;;

		#
		# Misc options
		#
		90)
			/bin/sh
			;;
		91)
			# shellcheck disable=SC2039
			echo -n "-- Image name: "
			read -r image
			;;
		99)
			sync
			reboot -f
			;;

		#
		# Default
		#
		*)
			;;
	esac
done

#!/bin/bash -eu
#
# Prepare a Raspberry Pi image
#

function out()
{
	rc=$?

	umount_all

	if [ "${rc}" -ne 0 ] ; then
		echo "** Error: Script failed" >&2
	fi
}

function umount_all()
{
	if [ -n "${BOOT_DIR}" ] ; then
		partumount -s "${BOOT_DIR}"
		if [ -z "${ROOT_DIR}" ] ; then
			echo "-- Boot partition unmounted from ${BOOT_DIR}"
		fi
		BOOT_DIR=
	fi

	if [ -n "${ROOT_DIR}" ] ; then
		for d in dev proc sys ; do
			sudo umount "${ROOT_DIR}/${d}" || sudo umount -l "${ROOT_DIR}/${d}"
		done
		partumount -s "${ROOT_DIR}"
		echo "-- Image partitions unmounted from ${ROOT_DIR}"
		ROOT_DIR=
	fi
}

function usage()
{
	cat << EOF
Usage: prepare-image [-d] [-h] [-i INSTALLER] IMAGE [OUTFILE]

Prepare a Raspberry Pi image.

Positional arguments:
  IMAGE                      Image file to prepare.
  OUTFILE                    Prepared image file.

Optional arguments:
  -d, --debug                Enable debug mode.
  -g, --grow SIZE            Grow the image and the root partition and
                             filesystem by SIZE.
  -h, --help                 Show this help text and exit.
  -i, --installer INSTALLER  Installer tarball. If not provided, download and
                             install the installer tarball from github.
EOF
}

debug=0
grow=
installer=
image=
outfile=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-d|--debug)
			debug=1
			;;
		-g|--grow)
			shift
			grow=${1#+}
			;;
		-h|--help)
			usage
			exit
			;;
		-i|--installer)
			shift
			installer=${1}
			;;
		*)
			if [ -z "${image}" ] ; then
				image=${1}
			elif [ -z "${outfile}" ] ; then
				outfile=${1}
			else
				echo "** Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${image}" ] ; then
	usage
	exit 2
fi

if ! [ -e "${image}" ] ; then
	echo "** Error: No such image file: ${image}" >&2
	exit 1
fi

if [ -n "${installer}" ] && ! [ -e "${installer}" ] ; then
	echo "** Error: No such installer: ${installer}" >&2
	exit 1
fi

outfile=${outfile%.gz}
if [ -z "${outfile}" ] ; then
	outfile=${image##*/}
	outfile=${outfile%.img*}+prep.img
fi

case "${image}" in
	*.img.xz)
		echo "-- Decompress image"
		xzcat "${image}" > "${outfile}"
		;;
	*.img.zip)
		# Check the number of files in the zipped image
		num_files=$(zipinfo -1 "${image}" | wc -l)
		if [ "${num_files}" -ne 1 ] ; then
			echo "** Error: Invalid number of zipped files: ${num_files}" >&2
			exit 1
		fi
		echo "-- Unzip image"
		unzip -p "${image}" > "${outfile}"
		;;
	*.img)
		echo "-- Copy image"
		cp "${image}" "${outfile}"
		;;
	*)
		echo "** Error: Unsupported image file format" >&2
		exit 1
		;;
esac

ROOT_DIR=
BOOT_DIR=
trap out EXIT INT TERM HUP

num_parts=$(partx -g "${outfile}" | wc -l)
if [ "${num_parts}" -eq 1 ] ; then
	# Mount the boot partition
	BOOT_DIR=$(partmount -rw -s "${outfile}" 1)
	echo "-- Boot partition mounted on ${BOOT_DIR}"

elif [ "${num_parts}" -eq 2 ] ; then
	# Resize the image
	if [ -n "${grow}" ] ; then
		echo "-- Resize image and partition ${num_parts}"
		qemu-img resize "${outfile}" +"${grow}"
		growpart "${outfile}" "${num_parts}"
	fi

	# Mount the root partition
	ROOT_DIR=$(partmount -rw -s "${outfile}" 2)

	# Grow the root filesystem
	if [ -n "${grow}" ] ; then
		echo "-- Resize filesystem"
		loop_dev=$(awk '$2 == "'"${ROOT_DIR}"'" { print $1 }' /etc/mtab )
		sudo resize2fs "${loop_dev}"
	fi

	# Figure out the boot directory
	if [ -d "${ROOT_DIR}"/boot/firmware ] ; then
		boot_dir=${ROOT_DIR}/boot/firmware
	elif [ -d "${ROOT_DIR}"/boot ] ; then
		boot_dir=${ROOT_DIR}/boot
	else
		boot_dir=
	fi

	if [ -n "${boot_dir}" ] ; then
		# Mount the boot partition
		BOOT_DIR=$(partmount -rw -s "${outfile}" 1 "${boot_dir}")
		echo "-- Image partitions mounted on ${ROOT_DIR}"
	else
		# Unmount the root partition and mount the boot partition
		partumount -s "${ROOT_DIR}"
		ROOT_DIR=
		BOOT_DIR=$(partmount -rw -s "${outfile}" 1)
		echo "-- Boot partition mounted on ${BOOT_DIR}"
	fi

else
	echo "** Error: Unsupported number of partitions: ${num_parts}" >&2
	exit 1
fi

if [ -n "${ROOT_DIR}" ] ; then
	for d in dev proc sys ; do
		sudo mount -o bind "/${d}" "${ROOT_DIR}/${d}"
	done
fi

here=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)

# Install the Raspberry Pi installer
opts=()
if [ -n "${installer}" ] ; then
	opts+=("${installer}")
fi
sudo "${here}"/rpi-install --boot "${BOOT_DIR}" "${opts[@]}"

# Configure the system
if [ -n "${ROOT_DIR}" ] ; then
	sudo "${here}"/configure-image "${ROOT_DIR}"
else
	sudo "${here}"/configure-image "${BOOT_DIR}"
fi

# Enter debug mode if requested
if [ "${debug}" -eq 1 ] ; then
	echo "-- Enter debug mode (type 'exit' to continue)"
	if [ -n "${ROOT_DIR}" ] ; then
		sudo debian_chroot=debug chroot "${ROOT_DIR}"
	else
		( cd "${BOOT_DIR}" && debian_chroot=debug bash ; cd / )
	fi
fi

# Unmount the partitions
umount_all

# Gzip the image
echo "-- Compress image"
gzip -f -S .gz "${outfile}"

echo "-- Created image ${outfile}.gz"

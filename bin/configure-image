#!/bin/bash -eu
#
# Configure a Raspberry Pi system
#

function out()
{
	rc=${?}

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		echo "** Error: Script failed" >&2
	fi

	exit "${rc}"
}

function set_cmdline()
{
	local cmdline opts opt
	echo "-- Set cmdline (${*})"

	cmdline=()
	readarray -t opts < <(head -1 "${CMDLINE_TXT}" | tr ' ' '\n')
	for opt in "${opts[@]}" ; do
		case "${opt}" in
			console=*|quiet|splash) ;;  # Drop the option
			*) cmdline+=("${opt}") ;;   # Keep the option
		esac
	done
	echo "${cmdline[*]} ${*}" > "${CMDLINE_TXT}"

	# Update config.txt
	cat << EOF >> "${BOOT_DIR}"/config.txt

# rpi-install CONFIG BEGIN
[all]
enable_uart=1
uart_2ndstage=1
# rpi-install CONFIG END
EOF

	if [ -z "${ROOT_DIR}" ] ; then
		return
	fi

	# Remove kernel.printk sysctl
	if [ "$(find "${ROOT_DIR}"/etc/sysctl.d/*.conf | wc -l)" -gt 0 ] ; then
		sed -i 's/^kernel.printk/# rpi-install kernel.printk/' \
			"${ROOT_DIR}"/etc/sysctl.d/*.conf
	fi

	# earlycon is different for Pi 4 :-(
	# Pi 4:   earlycon=uart8250,mmio32,0xfe215040
	# Pi 3/2: earlycon=uart8250,mmio32,0x3f215040

	# Purge flash-kernel options
	if [ -e "${ROOT_DIR}"/etc/default/flash-kernel ] ; then
		cat << EOF > "${ROOT_DIR}"/etc/default/flash-kernel
LINUX_KERNEL_CMDLINE=
LINUX_KERNEL_CMDLINE_DEFAULTS=
EOF
	fi
}

function add_r8152_net_module()
{
	echo "-- Add r8152 network module"

	if [ -d "${ROOT_DIR}"/etc/netplan/ ] &&
	   [ "$(find "${ROOT_DIR}"/etc/netplan/ -type f -name '*.yaml' | wc -l)" -gt 0 ] ; then
		sed -i 's/lan78xx/lan78xx r8152/' "${ROOT_DIR}"/etc/netplan/*.yaml
	fi

	if [ -e "${BOOT_DIR}"/network-config ] ; then
		# Add the r8152 module to the list of 'built-in' modules
		sed -i 's/lan78xx/lan78xx r8152/' "${BOOT_DIR}"/network-config
	fi
}

function usage()
{
	cat <<EOF
Usage: configure-image [-h] ROOT_DIR|BOOT_DIR

Configure a Raspberry Pi system.

Positional arguments:
  ROOT_DIR    The root directory of the system to configure.
  BOOT_DIR    The boot directory of the system to configure.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

HERE=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)

root_boot_dir=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${root_boot_dir}" ] ; then
				root_boot_dir=${1}
			else
				echo "** Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${root_boot_dir}" ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

if [ -e "${root_boot_dir}"/config.txt ] ; then
	BOOT_DIR=${root_boot_dir}
	ROOT_DIR=
else
	ROOT_DIR=${root_boot_dir}
	if [ -e "${ROOT_DIR}"/boot/firmware/config.txt ] ; then
		BOOT_DIR=${ROOT_DIR}/boot/firmware
	elif  [ -e "${ROOT_DIR}"/boot/config.txt ] ; then
		BOOT_DIR=${ROOT_DIR}/boot
	else
		echo "** Error: Boot directory not found" >&2
		exit 1
	fi
fi

if [ -e "${BOOT_DIR}"/nobtcmd.txt ] ; then
	CMDLINE_TXT="${BOOT_DIR}"/nobtcmd.txt
else
	CMDLINE_TXT="${BOOT_DIR}"/cmdline.txt
fi

set_cmdline "console=tty1" "console=serial0,115200" "ignore_loglevel" \
			"usb-storage.quirks=152d:0579:u"

if [ -z "${ROOT_DIR}" ] ; then
	exit
fi

export BOOT_DIR ROOT_DIR

"${HERE}"/../hooks/remove-packages unattended-upgrades needrestart ubiquity oem-config
"${HERE}"/../hooks/install-packages openssh-server sudo
"${HERE}"/../hooks/install-tools
"${HERE}"/../hooks/set-cloudinit-config
"${HERE}"/../hooks/set-hostname
"${HERE}"/../hooks/add-user ubuntu
"${HERE}"/../hooks/set-service enable ssh

# Configure desktop images
if [ -e "${ROOT_DIR}"/usr/share/doc/ubuntu-desktop/copyright ] ; then
	"${HERE}"/../hooks/set-service set-default graphical.target
	"${HERE}"/../hooks/enable-auto-login ubuntu
fi

# enable_wifi
add_r8152_net_module

# HACK: Disable persistent net names
if ! grep -q 'net.ifnames=0' "${CMDLINE_TXT}" ; then
	echo "-- Disable persistent net names"
	sed -i 's/^/net.ifnames=0 /' "${CMDLINE_TXT}"
fi

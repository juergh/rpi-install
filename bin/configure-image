#!/bin/bash -eu
#
# Configure a Raspberry Pi system
#

function out()
{
	rc=${?}

	trap - EXIT INT TERM HUP

	# Cleanup
	if [ -e "${ROOT_DIR}"/etc/resolv.orig ] ; then
		echo "-- Restore /etc/resolv.conf"
		rm -f "${ROOT_DIR}"/etc/resolv.conf
		mv "${ROOT_DIR}"/etc/resolv.orig "${ROOT_DIR}"/etc/resolv.conf
	fi

	if [ "${rc}" -ne 0 ] ; then
		echo "** Error: Script failed" >&2
	fi

	exit "${rc}"
}

function remove_packages()
{
	local packages package

	packages=()
	for package in unattended-upgrades needrestart ; do
		if dpkg -l "${package}" >/dev/null 2>&1 ; then
			packages+=("${package}")
		fi
	done

	if [ "${#packages[@]}" -eq 0 ] ; then
		return
	fi

	echo "-- Remove package"
	printf -- "--   %s\n" "${packages[@]}"

	chroot "${ROOT_DIR}" apt-get -y purge "${packages[@]}"
}

function install_packages()
{
	local packages

	packages=()
	if ! [ -d "${ROOT_DIR}"/etc/ssh/sshd_config.d ] ; then
		packages+=("openssh-server")
	fi
	if ! [ -d "${ROOT_DIR}"/etc/sudoers.d ] ; then
		packages+=("sudo")
	fi

	if [ "${#packages[@]}" -eq 0 ] ; then
		return
	fi

	if [ -e "${ROOT_DIR}"/etc/resolv.conf ] || \
	   [ -h "${ROOT_DIR}"/etc/resolv.conf ] ; then
		echo "-- Backup /etc/resolv.conf"
		mv "${ROOT_DIR}"/etc/resolv.conf "${ROOT_DIR}"/etc/resolv.orig
	fi
	cp /etc/resolv.conf "${ROOT_DIR}"/etc/resolv.conf

	echo "-- Install package"
	printf -- "--   %s\n" "${packages[@]}"

	chroot "${ROOT_DIR}" apt-get update
	chroot "${ROOT_DIR}" apt-get -y --no-install-recommends install \
		   "${packages[@]}"
	chroot "${ROOT_DIR}" apt-get -y clean
}

function install_tools()
{
	local tools

	readarray -t tools < <(cd "${HERE}" && ls -1 rpi-*)

	echo "-- Install tools"
	printf -- "--   %s\n" "${tools[@]}"

	( cd "${HERE}" && cp "${tools[@]}" "${ROOT_DIR}"/usr/bin )
}

function set_cloud_init_config()
{
	if [ -e "${BOOT_DIR}"/user-data ] ; then
		echo "-- Clear cloud-init user-data"
		# Purge cloud-init cruft
		cat << EOF > "${BOOT_DIR}"/user-data
#cloud-config
EOF
	fi

	if [ -e "${ROOT_DIR}"/etc/cloud/cloud.cfg ] ; then
		echo "-- Disable users-groups in cloud.cfg"
		sed -i 's/^ - users-groups/# rpi-install - users-groups/' \
			"${ROOT_DIR}"/etc/cloud/cloud.cfg
	fi
}

function set_hostname()
{
	echo "-- Set hostname"

	cp "${HERE}"/../etc/rpi-hostname.service "${ROOT_DIR}"/etc/systemd/system/
	systemctl --root="${ROOT_DIR}" enable rpi-hostname.service
}

function set_console()
{
	local cmdline opts opt
	echo "-- Set console (${*})"

	cmdline=()
	readarray -t opts < <(head -1 "${BOOT_DIR}"/cmdline.txt | tr ' ' '\n')
	for opt in "${opts[@]}" ; do
		case "${opt}" in
			console=*) ;;              # Drop the option
			*) cmdline+=("${opt}") ;;  # Keep the option
		esac
	done
	# cmdline+=("earlycon=pl011,0xfe201000") # This option might break boot
	echo "${cmdline[*]} ${*}" > "${BOOT_DIR}"/cmdline.txt

	# Update config.txt
	cat << EOF >> "${BOOT_DIR}"/config.txt

# rpi-install
[all]
enable_uart=1
EOF

	# Purge flask-kernel options
	if [ -e "${ROOT_DIR}"/etc/default/flash-kernel ] ; then
		cat << EOF > "${ROOT_DIR}"/etc/default/flash-kernel
LINUX_KERNEL_CMDLINE=
LINUX_KERNEL_CMDLINE_DEFAULTS=
EOF
	fi
}

function set_kernel_loglevel()
{
	local cmdline opts opt

	echo "-- Set kernel loglevel (${1})"

	cmdline=()
	readarray -t opts < <(head -1 "${BOOT_DIR}"/cmdline.txt | tr ' ' '\n')
	for opt in "${opts[@]}" ; do
		case "${opt}" in
			loglevel=*|ignore_loglevel|quiet) ;;  # Drop the option
			*) cmdline+=("${opt}") ;;             # Keep the option
		esac
	done
	echo "${cmdline[*]} loglevel=${1}" > "${BOOT_DIR}"/cmdline.txt

	sed -i 's/^kernel.printk/# rpi-install kernel.printk/' \
		"${ROOT_DIR}"/etc/sysctl.d/*.conf
}

function add_user()
{
	local user pubkey

	echo "-- Add user"

	for user in "${@}" ; do
		echo "--   ${user}"
		if ! grep -q "^${user}:" "${ROOT_DIR}"/etc/passwd  ; then
			useradd --root "${ROOT_DIR}" --create-home --user-group \
					--shell /bin/bash --password "$(openssl passwd -1 "${user}")" \
					"${user}"
		fi

		# Add a sudoer file
		cat << EOF > "${ROOT_DIR}"/etc/sudoers.d/"${user}"
"${user}" ALL = NOPASSWD: ALL
EOF
		chmod 440 "${ROOT_DIR}"/etc/sudoers.d/"${user}"

		# Copy the SSH public key
		pubkey=${HERE}/../ssh/${user}.pubkey
		if [ -e "${pubkey}" ] ; then
			echo "--     Import public SSH key"
			sshdir=${ROOT_DIR}/home/${user}/.ssh
			# shellcheck disable=SC2174
			mkdir -p -m 700 "${sshdir}"
			cat "${pubkey}" >> "${sshdir}"/authorized_keys
			chmod 600 "${sshdir}"/authorized_keys
			chroot "${ROOT_DIR}" chown -R "${user}":"${user}" /home/"${user}"/.ssh
		fi
	done
}

function set_service()
{
	local action service

	action=${1}
	shift

	echo "-- ${action^} service"

	for service in "${@}" ; do
		echo "--   ${service}"
		systemctl --root="${ROOT_DIR}" "${action}" "${service}" || continue

		# Enable pwauth for ssh
		if [ "${action}" = "enable" ] && [ "${service}" = "ssh" ] ; then
			echo "--     Enable password authentication"
			sed -i 's/^PasswordAuthentication/# rpi-install PasswordAuthentication/' \
				"${ROOT_DIR}"/etc/ssh/sshd_config
			cat << EOF >> "${ROOT_DIR}"/etc/ssh/sshd_config

# rpi-install
PasswordAuthentication yes
EOF
		fi
	done
}

function enable_wifi()
{
	local wifi_ssid wifi_passphrase

	echo "-- Enable wifi"

	wifi_ssid=$(pass show local/wifi | grep '^ssid: ')
	wifi_ssid=${wifi_ssid#* }

	wifi_passphrase=$(pass show local/wifi | grep '^passphrase: ')
	wifi_passphrase=${wifi_passphrase#* }

	if [ -d "${ROOT_DIR}"/etc/netplan ] ; then
		cat << EOF > "${ROOT_DIR}"/etc/netplan/99-rpi-install.yaml
#network:
#    wifis:
#        wlan0:
#            dhcp4: true
#            optional: true
#            access-points:
#                "${wifi_ssid}":
#                    password: "${wifi_passphrase}"
EOF
	else
		cat << EOF > "${ROOT_DIR}"/etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=CH

network={
    ssid="${wifi_ssid}"
    psk="${wifi_passphrase}"
}
EOF
	fi
}

function add_r8152_net_module()
{
	if ! [ -e "${BOOT_DIR}"/network-config ] ; then
		return
	fi

	echo "-- Add r8152 network module"

	# Add the r8152 module to the list of 'built-in' modules
	sed -i 's/lan78xx/lan78xx r8152/' "${BOOT_DIR}"/network-config
}

function usage()
{
	cat <<EOF
Usage: configure-image [-h] [ROOT_DIR]

Configure a Raspberry Pi system.

Positional arguments:
  ROOT_DIR    The root directory of the system to configure. If not provided,
              configures the current system.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

HERE=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)
ROOT_DIR=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${ROOT_DIR}" ] ; then
				ROOT_DIR=${1}
			else
				echo "** Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

trap out EXIT INT TERM HUP

if [ -d "${ROOT_DIR}"/boot/firmware ] ; then
	BOOT_DIR=${ROOT_DIR}/boot/firmware
elif  [ -d "${ROOT_DIR}"/boot ] ; then
	BOOT_DIR=${ROOT_DIR}/boot
else
	echo "** Error: No such boot directory: ${ROOT_DIR}/boot{/firmware,}" >&2
	exit 1
fi

remove_packages
install_packages
install_tools
set_cloud_init_config
set_hostname
set_console "console=tty1" "console=serial0,115200"
set_kernel_loglevel "8"
add_user "ubuntu"
set_service "enable" "ssh"
enable_wifi
add_r8152_net_module

# HACK: Disable persistent net names
if ! grep -q 'net.ifnames=0' "${BOOT_DIR}"/cmdline.txt ; then
	echo "-- Disable persistent net names"
	sed -i 's/^/net.ifnames=0 /' "${BOOT_DIR}"/cmdline.txt
fi

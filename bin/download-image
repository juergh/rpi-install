#!/bin/bash -eu
#
# Download a Raspberry Pi image
#

function out()
{
	local rc=${?}

	if [ "${rc}" -ne 0 ] ; then
		echo "** Error: Script failed" >&2
	fi
}

function download_image()
{
	local base_url=${1} remote_image=${2} local_image=${3:-}
	local sha256_file sha256_sum

	if [ -z "${local_image}" ] ; then
		local_image=${remote_image}
	fi

	echo "-- Trying ${base_url%/}/${remote_image}"

	# Check if a download is necessary
	sha256_file=${local_image}.sha256sum
	if [ -e "${local_image}" ] && [ -e "${sha256_file}" ] && \
		   curl --fail --head "${base_url}"/SHA256SUMS >/dev/null 2>&1 ; then
		sha256_sum=$(awk '{ print $1 }' "${sha256_file}")
		if [ -n "${sha256_sum}" ] && \
			   curl --fail --no-progress-meter "${base_url}"/SHA256SUMS | \
				   grep -q "${sha256_sum}" ; then
			echo "-- Image is up-to-date: ${image}"
			return 0
		fi
	fi

	# Download the image
	if ! curl --fail --head "${base_url}/${remote_image}" >/dev/null 2>&1 ; then
		echo "** Error: Remote file not found" >&2
		return 1
	fi
	wget -O "${local_image}" "${base_url}/${remote_image}" || return 1

	# Create the sha256sum file
	sha256sum "${local_image}" > "${sha256_file}" || return 1

	echo "-- Downloaded image ${local_image}"
}

function usage()
{
	cat <<EOF
Usage: download-image [-h] [-r RELEASE] SERIES ARCH

Download a Raspberry Pi image.

Positional argument:
  SERIES                 The series name, i.e., groovy, core18, raspios, ...
  ARCH                   The architecture of the image (armhf or arm64).

Optional arguments:
  -h, --help             Show this help text and exit.
  -r, --release RELEASE  Download release RELEASE of the image. See below for
                         the list of available releases. If not provided,
                         defaults to the first release of the list.

Image series:
  Ubuntu Desktop:          groovy-desktop, hirsute-desktop
  Ubuntu Classic:          xenial, bionic, focal, ...
  Ubuntu Core:             core16, core18, core20
  Raspberry Pi OS Lite:    raspios
  Raspberry Pi OS Desktop: raspios-desktop

Image releases:
  Ubuntu Desktop:          daily, release
  Ubuntu Classic:          daily, release
  Ubuntu Core:             edge, beta, stable
  Raspberry Pi OS Lite:    latest
  Raspberry Pi OS Desktop: latest
EOF
}

release=
series=
arch=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-r|--release)
			shift
			release=${1}
			;;
		*)
			if [ -z "${series}" ] ; then
				series=${1}
			elif [ -z "${arch}" ] ; then
				arch=${1}
			else
				echo "** Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${series}" ] || [ -z "${arch}" ] ; then
	usage
	exit 2
fi

if [ "${arch}" != "armhf" ] && [ "${arch}" != "arm64" ] ; then
	echo "** Error: Invalid architecture: ${arch}" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

# Set the image flavor name depending on the series
case "${series}" in
	bionic|core18)
		flavor=raspi3
		;;
	*)
		flavor=raspi
		;;
esac

case "${series}" in

	# Ubuntu Classic
	bionic|focal|groovy|hirsute)
		image=${series}-preinstalled-server-${arch}+${flavor}.img.xz
		daily_devel_url=http://cdimage.ubuntu.com/ubuntu-server/daily-preinstalled/current/
		daily_url=http://cdimage.ubuntu.com/ubuntu-server/${series}/daily-preinstalled/current/
		release_image_pattern="ubuntu-.*?-preinstalled-server-${arch}\+${flavor}\.img\.xz"
		release_url=http://cdimage.ubuntu.com/releases/${series}/release/

		case "${release}" in
			""|daily)
				# Download the daily devel image
				if ! download_image "${daily_devel_url}" "${image}" ; then
					# Download the daily image
					download_image "${daily_url}" "${image}"
				fi
				;;
			release)
				# Get the name of the latest release image
				href=$(curl -s "${release_url}" | \
						   grep -oP 'href="'"${release_image_pattern}"'"' | \
						   sort -uV | tail -1)
				remote_image=${href#href=\"}
				remote_image=${remote_image%\"}
				if [ -z "${remote_image}" ] ; then
					echo "** Error: Unable to determine release image name" >&2
					exit 1
				fi

				# Download the latest release image
				download_image "${release_url}" "${remote_image}" "${image}"
				;;
			*)
				echo "** Error: Invalid release: ${release}" >&2
				exit 1
				;;
		esac
		;;

	# Ubuntu Desktop
	groovy-desktop|hirsute-desktop)
		if [ "${arch}" != "arm64" ] ; then
			echo "** Error: Desktop images are only supported on arm64" >&2
			exit 1
		fi
		image=${series%-desktop}-preinstalled-desktop-arm64+raspi.img.xz
		daily_devel_url=http://cdimage.ubuntu.com/daily-preinstalled/current/
		release_image_pattern="ubuntu-.*?-preinstalled-desktop-arm64\+raspi\.img\.xz"
		release_url=http://cdimage.ubuntu.com/releases/${series%-desktop}/release/

		case "${release}" in
			""|daily)
				# Download the daily devel image
				download_image "${daily_devel_url}" "${image}"
				;;
			release)
				# Get the name of the latest release image
				href=$(curl -s "${release_url}" | \
						   grep -oP 'href="'"${release_image_pattern}"'"' | \
						   sort -uV | tail -1)
				remote_image=${href#href=\"}
				remote_image=${remote_image%\"}
				if [ -z "${remote_image}" ] ; then
					echo "** Error: Unable to determine release image name" >&2
					exit 1
				fi

				# Download the latest release image
				download_image "${release_url}" "${remote_image}" "${image}"
				;;
			*)
				echo "** Error: Invalid release: ${release}" >&2
				exit 1
				;;
		esac
		;;

	# Ubuntu Core
	core18|core20)
		year=${series#core}
		image=ubuntu-core-${year}-${arch}+${flavor}.img.xz
		edge=dangerous-edge
		beta=dangerous-beta
		if [ "${series}" = "core18" ] ; then
			edge=edge
			beta=beta
		fi
		edge_url=http://cdimage.ubuntu.com/ubuntu-core/${year}/${edge}/pending/
		beta_url=http://cdimage.ubuntu.com/ubuntu-core/${year}/${beta}/current/
		stable_url=http://cdimage.ubuntu.com/ubuntu-core/${year}/stable/current/

		case "${release}" in
			""|edge)
				# Donwload the edge image
				download_image "${edge_url}" "${image}"
				;;
			beta)
				# Donwload the beta image
				download_image "${beta_url}" "${image}"
				;;
			stable)
				# Download the stable image
				download_image "${stable_url}" "${image}"
				;;
			*)
				echo "** Error: Invalid release: ${release}" >&2
				exit 1
				;;
		esac
		;;

	# Raspberry Pi OS Lite
	raspios)
		image=raspios-lite-${arch}.img.zip
		remote_image=raspios_lite_${arch}_latest
		latest_url=https://downloads.raspberrypi.org/

		# Download the latest image
		download_image "${latest_url}" "${remote_image}" "${image}"
		;;

	# Raspberry Pi OS Desktop
	raspios-desktop)
		image=raspios-desktop-${arch}.img.zip
		remote_image=raspios_${arch}_latest
		latest_url=https://downloads.raspberrypi.org/

		# Download the latest image
		download_image "${latest_url}" "${remote_image}" "${image}"
		;;

	*)
		trap - EXIT INT TERM HUP
		echo "** Error: Invalid series: ${series}" >&2
		exit 1
		;;

esac

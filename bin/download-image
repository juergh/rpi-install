#!/bin/bash -eu
#
# Download a Raspberry Pi image
#

function out()
{
	local rc=${?}

	if [ "${rc}" -ne 0 ] ; then
		echo "-- Error: Script failed" >&2
	fi
}

function download_image()
{
	local image_url=${1} image=${2}

	echo "-- Trying ${image_url}"

	# Check if the remote file exists
	if ! curl --fail --head "${image_url}" >/dev/null 2>&1 ; then
		echo "-- Error: Remote file not found" >&2
		return 1
	fi

	# Download the image
	wget --no-verbose --show-progress -O "${image}" "${image_url}" || return 1

	echo "-- Downloaded image ${image}"
}

function download_ubuntu_classic()
{
	local series=${1} flavor=${2} arch=${3} release=${4}
	local path raspi url remote_image image_pattern href image

	path=
	if [ "${flavor}" = "server" ] ; then
		path="ubuntu-server"
	fi

	raspi=raspi
	if [ "${series}" = "bionic" ] ; then
		raspi=raspi3
	fi

	case "${release}" in
		""|devel)
			url=http://cdimage.ubuntu.com/${path}/daily-preinstalled/current/
			remote_image=${series}-preinstalled-${flavor}-${arch}+${raspi}.img.xz
			;;
		daily)
			url=http://cdimage.ubuntu.com/${path}/${series}/daily-preinstalled/current/
			remote_image=${series}-preinstalled-${flavor}-${arch}+${raspi}.img.xz
			;;
		release)
			# Get the name of the latest release image
			url=http://cdimage.ubuntu.com/releases/${series}/release/
			image_pattern="ubuntu-.*?-preinstalled-${flavor}-${arch}\+${raspi}\.img\.xz"
			href=$(curl -s "${url}" | \
					   grep -oP 'href="'"${image_pattern}"'"' | \
					   sort -uV | tail -1)
			remote_image=${href#href=\"}
			remote_image=${remote_image%\"}
			if [ -z "${remote_image}" ] ; then
				echo "-- Error: Unable to determine release image name" >&2
				exit 1
			fi
			;;
		*)
			echo "-- Error: Invalid release: ${release}" >&2
			exit 1
			;;
	esac

	image=ubuntu-${series}-${flavor}-${arch}+raspi.img.xz

	# Download the image
	if ! download_image "${url}/${remote_image}" "${image}" ; then
		case "${release}" in
			""|devel)
				download_ubuntu_classic "${series}" "${flavor}" "${arch}" daily
				;;
			daily)
				download_ubuntu_classic "${series}" "${flavor}" "${arch}" release
				;;
			release)
				exit 1
				;;
		esac
	fi
}

function download_ubuntu_core()
{
	local series=${1} arch=${2} release=${3}
	local year url raspi remote_image image

	year=${series#core}
	case "${release}" in
		""|edge)
			url=http://cdimage.ubuntu.com/ubuntu-core/${year}/dangerous-edge/pending/
			;;
		beta)
			url=http://cdimage.ubuntu.com/ubuntu-core/${year}/dangerous-beta/current/
			;;
		stable)
			url=http://cdimage.ubuntu.com/ubuntu-core/${year}/stable/current/
			;;
		*)
			echo "-- Error: Invalid release: ${release}" >&2
			exit 1
			;;
	esac

	raspi=raspi
	if [ "${series}" = "core18" ] ; then
		raspi=raspi3
	fi
	remote_image=ubuntu-core-${year}-${arch}+${raspi}.img.xz
	image=ubuntu-${release}-${arch}+raspi.img.xz

	# Donwload the image
	download_image "${url}/${remote_image}" "${image}"
}

function download_raspios()
{
	local flavor=${1} arch=${2}
	local remote_image url image

	case "${flavor}" in
		lite|full)
			remote_image=raspios_${flavor}_${arch}_latest
			;;
		desktop)
			remote_image=raspios_${arch}_latest
			;;
		*)
			echo "-- Error: Invalid flavor: ${flavor}" >&2
			exit 1
			;;
	esac

	url=https://downloads.raspberrypi.org/
    image=raspios-${flavor}-${arch}.img.zip

	# Download the image
	download_image "${url}/${remote_image}" "${image}"
}

function usage()
{
	cat <<EOF
Usage: download-image [-h] [-r RELEASE] SERIES ARCH

Download a Raspberry Pi image.

Positional argument:
  SERIES                 The series name, i.e., groovy, core18, raspios, ...
  ARCH                   The architecture of the image (armhf or arm64).

Optional arguments:
  -h, --help             Show this help text and exit.
  -r, --release RELEASE  Download release RELEASE of the image. See below for
                         the list of available releases. If not provided,
                         defaults to the first release of the list.

Image series:
  Ubuntu Desktop:          groovy-desktop, hirsute-desktop, ...
  Ubuntu Classic:          xenial, bionic, focal, ...
  Ubuntu Core:             core16, core18, core20
  Raspberry Pi OS Lite:    raspios
  Raspberry Pi OS Desktop: raspios-desktop

Image releases:
  Ubuntu Desktop:          daily, release
  Ubuntu Classic:          daily, release
  Ubuntu Core:             edge, beta, stable
  Raspberry Pi OS Lite:    latest
  Raspberry Pi OS Desktop: latest
EOF
}

release=
series=
arch=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-r|--release)
			shift
			release=${1}
			;;
		*)
			if [ -z "${series}" ] ; then
				series=${1}
			elif [ -z "${arch}" ] ; then
				arch=${1}
			else
				echo "-- Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${series}" ] || [ -z "${arch}" ] ; then
	usage
	exit 2
fi

if [ "${arch}" != "armhf" ] && [ "${arch}" != "arm64" ] ; then
	echo "-- Error: Invalid architecture: ${arch}" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

case "${series}" in

	# Ubuntu Classic
	bionic|focal|groovy|hirsute|impish)
		download_ubuntu_classic "${series}" server "${arch}" "${release}"
		;;

	# Ubuntu Desktop
	groovy-desktop|hirsute-desktop|impish-desktop)
		if [ "${arch}" != "arm64" ] ; then
			echo "-- Error: Desktop images are only supported on arm64" >&2
			exit 1
		fi
		download_ubuntu_classic "${series%-desktop}" desktop arm64 "${release}"
		;;

	# Ubuntu Core
	core18|core20)
		download_ubuntu_core "${series}" "${arch}" "${release}"
		;;

	# Raspberry Pi OS
	raspios|rapios-lite|raspios-full|raspios-desktop)
		flavor=${series#raspios}
		flavor=${flavor#-:-lite}
		download_raspios "${flavor}" "${arch}"
		;;

	*)
		trap - EXIT INT TERM HUP
		echo "-- Error: Invalid series: ${series}" >&2
		exit 1
		;;

esac

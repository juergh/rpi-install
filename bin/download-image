#!/bin/bash -eu
#
# Download a Raspberry Pi image
#

function out()
{
	local rc=${?}

	if [ "${rc}" -ne 0 ] ; then
		echo "-- Error: Script failed" >&2
	fi
}

function download_image()
{
	local image_url=${1} image=${2}

	echo "-- Trying ${image_url}"

	# Check if the remote file exists
	if ! curl --fail --head "${image_url}" >/dev/null 2>&1 ; then
		echo "-- Error: Remote file not found" >&2
		return 1
	fi

	# Download the image
	wget --no-verbose --show-progress -O "${image}" "${image_url}" || return 1

	echo "-- Downloaded image ${image}"
}

function download_ubuntu_classic()
{
	local release=${1} flavor=${2} arch=${3} channel=${4}
	local path raspi url remote_image image_pattern href image

	path=
	if [ "${flavor}" = "server" ] ; then
		path="ubuntu-server"
	fi

	raspi=raspi
	if [ "${release}" = "bionic" ] ; then
		raspi=raspi3
	fi

	case "${channel}" in
		""|devel)
			url=http://cdimage.ubuntu.com/${path}/daily-preinstalled/current/
			remote_image=${release}-preinstalled-${flavor}-${arch}+${raspi}.img.xz
			;;
		daily)
			url=http://cdimage.ubuntu.com/${path}/${release}/daily-preinstalled/current/
			remote_image=${release}-preinstalled-${flavor}-${arch}+${raspi}.img.xz
			;;
		release)
			# Get the name of the latest release image
			url=http://cdimage.ubuntu.com/releases/${release}/release/
			image_pattern="ubuntu-.*?-preinstalled-${flavor}-${arch}\+${raspi}\.img\.xz"
			href=$(curl -s "${url}" | \
					   grep -oP 'href="'"${image_pattern}"'"' | \
					   sort -uV | tail -1)
			remote_image=${href#href=\"}
			remote_image=${remote_image%\"}
			if [ -z "${remote_image}" ] ; then
				echo "-- Error: Unable to determine release image name" >&2
				exit 1
			fi
			;;
		*)
			echo "-- Error: Invalid channel: ${channel}" >&2
			exit 1
			;;
	esac

	image=${release}-${flavor}-${arch}+raspi.img.xz

	# Download the image
	if ! download_image "${url}/${remote_image}" "${image}" ; then
		case "${channel}" in
			""|devel)
				download_ubuntu_classic "${release}" "${flavor}" "${arch}" daily
				;;
			daily)
				download_ubuntu_classic "${release}" "${flavor}" "${arch}" release
				;;
			release)
				exit 1
				;;
		esac
	fi
}

function download_ubuntu_core()
{
	local release=${1} arch=${2} channel=${3}
	local url raspi remote_image image

	case "${channel}" in
		""|edge)
			url=http://cdimage.ubuntu.com/ubuntu-core/${release}/dangerous-edge/pending/
			;;
		beta)
			url=http://cdimage.ubuntu.com/ubuntu-core/${release}/dangerous-beta/current/
			;;
		stable)
			url=http://cdimage.ubuntu.com/ubuntu-core/${release}/stable/current/
			;;
		*)
			echo "-- Error: Invalid channel: ${channel}" >&2
			exit 1
			;;
	esac

	raspi=raspi
	if [ "${release}" = "18" ] ; then
		raspi=raspi3
	fi
	remote_image=ubuntu-core-${release}-${arch}+${raspi}.img.xz
	image=core-${release}-${arch}+raspi.img.xz

	# Donwload the image
	download_image "${url}/${remote_image}" "${image}"
}

function download_raspios()
{
	local flavor=${1} arch=${2}
	local url remote_image image

	url=https://downloads.raspberrypi.org/
	remote_image=raspios_${flavor}_${arch}_latest
	image=raspios-${flavor}-${arch}.img.zip

	# Download the image
	download_image "${url}/${remote_image}" "${image}"
}

function usage()
{
	cat <<EOF
Usage: download-image [-h] [-c CHANNEL] DISTRO ARCH

Download a Raspberry Pi image.

Positional argument:
  DISTRO                   The distro name, i.e., groovy, core18, raspios, ...
  ARCH                     The architecture of the image (armhf or arm64).

Optional arguments:
  -h, --help               Show this help text and exit.
  -c, --channel CHANNEL    Download the image from channel CHANNEL. See below
                           for the list of available channels. If not provided,
                           defaults to the first channel of the list.

Image distros:
  Ubuntu Classic:          xenial, bionic, focal, ...
  Ubuntu Desktop:          groovy-desktop, hirsute-desktop, ...
  Ubuntu Core:             core16, core18, core20, ...
  Raspberry Pi OS Lite:    raspios
  Raspberry Pi OS Full:    raspios-full
  Raspberry Pi OS Desktop: raspios-desktop

Image channels:
  Ubuntu Classic:          daily, release
  Ubuntu Desktop:          daily, release
  Ubuntu Core:             edge, beta, stable
  Raspberry Pi OS:         latest
EOF
}

channel=
distro=
arch=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-c|--channel)
			shift
			channel=${1}
			;;
		*)
			if [ -z "${distro}" ] ; then
				distro=${1}
			elif [ -z "${arch}" ] ; then
				arch=${1}
			else
				echo "-- Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${distro}" ] || [ -z "${arch}" ] ; then
	usage
	exit 2
fi

if [ "${arch}" != "armhf" ] && [ "${arch}" != "arm64" ] ; then
	echo "-- Error: Invalid architecture: ${arch}" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

case "${distro}" in

	# Ubuntu Classic
	bionic|focal|groovy|hirsute|impish)
		download_ubuntu_classic "${distro}" server "${arch}" "${channel}"
		;;

	# Ubuntu Desktop
	groovy-desktop|hirsute-desktop|impish-desktop)
		if [ "${arch}" != "arm64" ] ; then
			echo "-- Error: Desktop images are only supported on arm64" >&2
			exit 1
		fi
		download_ubuntu_classic "${distro%-desktop}" desktop arm64 "${channel}"
		;;

	# Ubuntu Core
	core18|core20)
		download_ubuntu_core "${distro#core}" "${arch}" "${channel}"
		;;

	# Raspberry Pi OS
	raspios|rapios-lite|raspios-full|raspios-desktop)
		flavor=${distro#raspios}
		flavor=${flavor#-:-lite}
		download_raspios "${flavor}" "${arch}"
		;;

	*)
		trap - EXIT INT TERM HUP
		echo "-- Error: Invalid distro: ${distro}" >&2
		exit 1
		;;

esac

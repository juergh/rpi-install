#!/bin/bash -eu
#
# Download a Raspberry Pi image
#

function out()
{
	local rc=${?}

	if [ "${rc}" -ne 0 ] ; then
		echo "-- Error: Script failed" >&2
	fi
}

function download_image()
{
	local image_url=${1} outfile=${2}

	echo "-- Trying ${image_url}"

	# Check if the remote file exists
	if ! curl --fail --head "${image_url}" >/dev/null 2>&1 ; then
		echo "-- Error: Remote image not found" >&2
		return 1
	fi

	if [ "${DRY_RUN}" -eq 1 ] ; then
		echo "-- Skipping image download (dry run)"
		return
	fi

	# Download the image
	wget --no-verbose --show-progress -O "${outfile}" "${image_url}" || return 1

	echo "-- Downloaded image to ${outfile}"
}

function download_ubuntu_classic()
{
	local release=${1} flavor=${2} arch=${3} channel=${4} outfile=${5}
	local path raspi url remote_image

	# Download order
	declare -A channel_order=(
		["devel"]="daily"
		["daily"]="release"
		["release"]="-1"
	)

	path=ubuntu-server
	if [ "${flavor}" = "desktop" ] ; then
		if [ "${arch}" != "arm64" ] ; then
			echo "-- Error: Ubuntu desktop is only supported on arm64" >&2
			exit 1
		fi
		path=
	fi

	raspi=raspi
	if [ "${release}" = "bionic" ] ; then
		raspi=raspi3
	fi

	channel=${channel:-devel}
	case "${channel}" in
		devel)
			url=http://cdimage.ubuntu.com/${path}/daily-preinstalled/current/
			remote_image=${release}-preinstalled-${flavor}-${arch}+${raspi}.img.xz
			;;
		daily)
			url=http://cdimage.ubuntu.com/${path}/${release}/daily-preinstalled/current/
			remote_image=${release}-preinstalled-${flavor}-${arch}+${raspi}.img.xz
			;;
		release)
			url=http://cdimage.ubuntu.com/releases/${release}/release/
			# Get the name of the release image
			remote_image=$(curl -s "${url}"/SHA256SUMS | \
			               grep -oP "ubuntu-.*?-preinstalled-${flavor}-${arch}\+${raspi}\.img\.xz" || true)
			if [ -z "${remote_image}" ] ; then
				echo "-- Error: Unable to determine release image name" >&2
				exit 1
			fi
			;;
		*)
			echo "-- Error: Invalid channel: ${channel}" >&2
			exit 1
			;;
	esac

	if [ -z "${outfile}" ] ; then
		outfile=${release}-${flavor}-${arch}+raspi.img.xz
	fi

	# Download the image
	if ! download_image "${url}/${remote_image}" "${outfile}" ; then
		next_channel=${channel_order[${channel}]}
		if [ "${next_channel}" = "-1" ] ; then
			# Nothing left to try
			exit 1
		fi
		download_ubuntu_classic "${release}" "${flavor}" "${arch}" "${next_channel}" "${outfile}"
	fi
}

function download_ubuntu_core()
{
	local release=${1} arch=${2} channel=${3} outfile=${4}
	local url raspi remote_image next_channel

	# Download order
	declare -A channel_order=(
		["edge"]="beta"
		["beta"]="candidate"
		["candidate"]="stable"
		["stable"]="dangerous-edge"

		["dangerous-edge"]="dangerous-beta"
		["dangerous-beta"]="dangerous-candidate"
		["dangerous-candidate"]="dangerous-stable"
		["dangerous-stable"]="-1"
	)

	case "${release}" in
		16|18)
			if [ "${release}" = "16" ] && [ "${arch}" != "armhf" ] ; then
				echo "-- Error: Ubuntu core${release} is only supported on armhf" >&2
				exit 1
			fi
			raspi=raspi3
			;;
		*)
			raspi=raspi
			;;
	esac

	channel=${channel:-edge}
	if [ -z "${channel_order[${channel}]:-}" ] ; then
		echo "-- Error: Invalid channel: ${channel}" >&2
		exit 1
	fi

	remote_image=ubuntu-core-${release}-${arch}+${raspi}.img.xz

	if [ -z "${outfile}" ] ; then
		outfile=core-${release}-${arch}+raspi.img.xz
	fi

	# Download the image
	url=http://cdimage.ubuntu.com/ubuntu-core/${release}/${channel}
	if ! download_image "${url}"/current/"${remote_image}" "${outfile}" ; then
		if ! download_image "${url}"/pending/"${remote_image}" "${outfile}" ; then
			next_channel=${channel_order[${channel}]}
			if [ "${next_channel}" = "-1" ] ; then
				# Nothing left to try
				exit 1
			fi
			download_ubuntu_core "${release}" "${arch}" "${next_channel}" "${outfile}"
		fi
	fi
}

function download_raspios()
{
	local flavor=${1} arch=${2} outfile=${3}
	local image_type url href image_dir remote_image

	case "${flavor}" in
		lite|full)
			image_type=raspios_${flavor}_${arch}
			;;
		*)
			image_type=raspios_${arch}
			;;
	esac

	# Get the directory component of the latest image
	url=https://downloads.raspberrypi.org/${image_type}/images/
	href=$(curl -s "${url}" | \
			   grep -oP 'href="'"${image_type}-.*?"'"' | \
			   sort -uV | tail -1)
	image_dir=${href#href=\"}
	image_dir=${image_dir%\"}
	if [ -z "${image_dir}" ] ; then
		echo "-- Error: Unable to determine image directory" >&2
		exit 1
	fi

	# Get the name of the latest image
	url=https://downloads.raspberrypi.org/${image_type}/images/${image_dir}
	href=$(curl -s "${url}" | \
			   grep -oP 'href="'".*?\.zip"'"' | \
			   sort -uV | tail -1)
	remote_image=${href#href=\"}
	remote_image=${remote_image%\"}
	if [ -z "${remote_image}" ] ; then
		echo "-- Error: Unable to determine image name" >&2
		exit 1
	fi

	if [ -z "${outfile}" ] ; then
		outfile=raspios-${flavor}-${arch}.img.zip
	fi

	# Download the image
	download_image "${url}/${remote_image}" "${outfile}"
}

function usage()
{
	cat <<EOF
Usage: download-image [-c CHANNEL] [-d] [-h] DISTRO ARCH [OUTFILE]

Download a Raspberry Pi image.

Positional argument:
  DISTRO                   Distro name, i.e., groovy, core18, raspios, ...
  ARCH                     Image architecture (armhf or arm64).
  OUTFILE                  Filename of the downloaded image.

Optional arguments:
  -h, --help               Show this help text and exit.
  -c, --channel CHANNEL    Download the image from channel CHANNEL. See below
                           for the list of available channels. If not provided,
                           defaults to the first channel of the list.
  -d, --dry-run            Check if the remote image exists but don't download
                           it.

Image distros:
  Ubuntu Classic:          xenial, bionic, focal, ...
  Ubuntu Desktop:          jammy-desktop, ...
  Ubuntu Core:             core16, core18, core20, ...
  Raspberry Pi OS Lite:    raspios
  Raspberry Pi OS Desktop: raspios-desktop
  Raspberry Pi OS Full:    raspios-full

Image channels:
  Ubuntu Classic:          daily, release
  Ubuntu Desktop:          daily, release
  Ubuntu Core:             edge, beta, candidate, stable
                           dangerous-edge, dangerous-beta, dangerous-candidate, dangerous-stable
  Raspberry Pi OS:         latest
EOF
}

DRY_RUN=0

channel=
distro=
arch=
outfile=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-d|--dry-run)
			DRY_RUN=1
			;;
		-h|--help)
			usage
			exit
			;;
		-c|--channel)
			shift
			channel=${1}
			;;
		*)
			if [ -z "${distro}" ] ; then
				distro=${1}
			elif [ -z "${arch}" ] ; then
				arch=${1}
			elif [ -z "${outfile}" ] ; then
				outfile=${1}
			else
				echo "-- Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${distro}" ] || [ -z "${arch}" ] ; then
	usage
	exit 2
fi

if [ "${arch}" != "armhf" ] && [ "${arch}" != "arm64" ] ; then
	echo "-- Error: Invalid architecture: ${arch}" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

case "${distro}" in

	# Ubuntu Classic
	bionic|focal|jammy|kinetic|lunar|\
	bionic-*|focal-*|jammy-*|kinetic-*|lunar-*)
		flavor=${distro#*-}
		case "${flavor}" in
			"${distro}")
				flavor=server
				;;
			server|desktop)
				true
				;;
			*)
				trap - EXIT INT TERM HUP
				echo "-- Error: Invalid distro: ${distro}" >&2
				exit 1
				;;
		esac
		download_ubuntu_classic "${distro%-*}" "${flavor}" "${arch}" "${channel}" "${outfile}"
		;;

	# Ubuntu Core
	core16|core18|core20|core22)
		download_ubuntu_core "${distro#core}" "${arch}" "${channel}" "${outfile}"
		;;

	# Raspberry Pi OS
	raspios|raspios-lite|raspios-desktop|raspios-full)
		if [ "${distro}" = "raspios" ] ; then
			flavor=lite
		else
			flavor=${distro#*-}
		fi
		download_raspios "${flavor}" "${arch}" "${outfile}"
		;;

	*)
		trap - EXIT INT TERM HUP
		echo "-- Error: Invalid distro: ${distro}" >&2
		exit 1
		;;

esac

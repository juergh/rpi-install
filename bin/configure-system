#!/bin/bash -eu
#
# Configure a Raspberry Pi system
#

function out()
{
	rc=${?}

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		echo "** Error: Script failed" >&2
	fi

	exit "${rc}"
}

function print_var()
{
	local var=${1}

	printf "%-12s: %s\n" "${var}" "${!var}"
}

function set_boot_root_dir
{
	local system_dir=${1}

	BOOT_DIR=
	ROOT_DIR=

	if [ -e "${system_dir}"/config.txt ] ; then
		BOOT_DIR=${system_dir}
		return
	fi

	ROOT_DIR=${system_dir}
	if [ -e "${ROOT_DIR}"/boot/firmware/config.txt ] ; then
		BOOT_DIR=${ROOT_DIR}/boot/firmware
	elif  [ -e "${ROOT_DIR}"/boot/config.txt ] ; then
		BOOT_DIR=${ROOT_DIR}/boot
	fi
}

function set_system_id_type
{
	SYSTEM_ID=
	SYSTEM_TYPE=

	if [ -z "${ROOT_DIR}" ] ; then
		# If there's no root directory, assume it's Ubuntu Core
		SYSTEM_ID=core
		return
	fi

	if [ -e "${ROOT_DIR}"/etc/os-release ] ; then
		SYSTEM_ID=$(sed -n 's/^ID=//p' "${ROOT_DIR}"/etc/os-release)
	elif [ -e "${ROOT_DIR}"/etc/lsb-release ] ; then
		SYSTEM_ID=$(sed -n 's/^DISTRIB_ID=//p' "${ROOT_DIR}"/etc/lsb-release)
	fi

	SYSTEM_ID=${SYSTEM_ID,,}
}

function set_cmdline_txt
{
	local f

	CMDLINE_TXT=

	for f in nobtcmd.txt cmdline.txt ; do
		f=${BOOT_DIR}/${f}
		if [ -e "${f}" ] ; then
			CMDLINE_TXT=${f}
			return
		fi
	done
}

function set_config_txt
{
	local f

	CONFIG_TXT=

	for f in extraconfig.txt config.txt ; do
		f=${BOOT_DIR}/${f}
		if [ -e "${f}" ] ; then
			CONFIG_TXT=${f}
			return
		fi
	done
}

function run_hook()
{
	local hook=${1}
	shift

	"${HERE}"/../hooks/"${hook}" "${@}"
}

function usage()
{
	cat <<EOF
Usage: configure-system [-d] [-h] SYSTEM_DIR

Configure a Raspberry Pi system.

Positional arguments:
  SYSTEM_DIR     The directory where the system to configure is mounted at.

Optional arguments:
  -d, --dry-run  Don't make any modifications.
  -h, --help     Show this help text and exit.
EOF
}

HERE=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)

dry_run=0
system_dir=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-d|--dry-run)
			dry_run=1
			;;
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${system_dir}" ] ; then
				system_dir=${1}
			else
				echo "** Error: Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${system_dir}" ] ; then
	usage
	exit 2
fi

# Determine system boot and root directories
set_boot_root_dir "${system_dir}"
if [ -z "${BOOT_DIR}" ] ; then
	echo "** Error: Failed to determine boot directory" >&2
	exit 1
fi
print_var BOOT_DIR
print_var ROOT_DIR

# Determine system ID and type
set_system_id_type
if [ -z "${SYSTEM_ID}" ] ; then
	echo "** Error: Failed to determine system ID" >&2
	exit 1
fi
print_var SYSTEM_ID
print_var SYSTEM_TYPE

# Determine which cmdline.txt to use
set_cmdline_txt
print_var CMDLINE_TXT

# Determine which config.txt to use
set_config_txt
print_var CONFIG_TXT

if [ ${dry_run} -eq 1 ] ; then
	echo "Dry run, exiting..."
	exit
fi

trap out EXIT INT TERM HUP

export BOOT_DIR ROOT_DIR SYSTEM_ID SYSTEM_TYPE CMDLINE_TXT CONFIG_TXT

run_hook set-cmdline "console=tty1" "console=serial0,115200" \
                     "ignore_loglevel" \
                     "usb-storage.quirks=152d:0579:u"

if [ -z "${ROOT_DIR}" ] ; then
	exit
fi

run_hook remove-packages unattended-upgrades needrestart ubiquity oem-config
run_hook install-packages openssh-server sudo
run_hook install-tools
run_hook disable-apt-periodic-updates
run_hook set-cloudinit-config
run_hook set-hostname
run_hook add-user ubuntu
run_hook set-service enable ssh
run_hook add-issue
run_hook disable-flash-kernel-backups

# Configure desktop images
if [ -e "${ROOT_DIR}"/usr/share/doc/ubuntu-desktop/copyright ] ; then
	run_hook set-service set-default graphical.target
	run_hook enable-auto-login ubuntu
fi

# enable_wifi
run_hook add-net-module r8152

run_hook hacks

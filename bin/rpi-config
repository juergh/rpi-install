#!/bin/bash -eu
#
# Configure a Raspberry Pi system
#

function out()
{
        rc=$?

        if [ "${rc}" -ne 0 ] ; then
                echo "** Error: Script failed" >&2
        fi
}

function set_cloud_init_config()
{
	if [ -e "${BOOT_DIR}"/user-data ] ; then
		echo "-- Clear cloud-init user-data"
		# Purge cloud-init cruft
		cat << EOF > "${BOOT_DIR}"/user-data
#cloud-config
EOF
	fi

	if [ -e "${ROOT_DIR}"/etc/cloud/cloud.cfg ] ; then
		echo "-- Disable users-groups in cloud.cfg"
		sed -i 's/^ - users-groups/# rpi-config - users-groups/' \
			"${ROOT_DIR}"/etc/cloud/cloud.cfg
	fi
}

function install_tools()
{
	echo "-- Install tools"

	cp "${HERE}"/rpi-* "${ROOT_DIR}"/usr/bin
}

function set_hostname()
{
	echo "-- Set hostname"

	cp "${HERE}"/../etc/rpi-hostname.service "${ROOT_DIR}"/etc/systemd/system/
	systemctl --root="${ROOT_DIR}" enable rpi-hostname.service
}

function set_console()
{
	local cmdline opts opt
	echo "-- Set console (${*})"

    cmdline=()
    readarray -t opts < <(head -1 "${BOOT_DIR}"/cmdline.txt | tr ' ' '\n')
    for opt in "${opts[@]}" ; do
        case "${opt}" in
            console=*) ;;              # Drop the option
            *) cmdline+=("${opt}") ;;  # Keep the option
        esac
    done
    # cmdline+=("earlycon=pl011,0xfe201000") # This option might break boot
    echo "${cmdline[*]} ${*}" > "${BOOT_DIR}"/cmdline.txt

	# Update config.txt
    sed -i '/^# rpi-config$/,+2d' "${BOOT_DIR}"/config.txt
    cat << EOF >> "${BOOT_DIR}"/config.txt
# rpi-config
[all]
enable_uart=1
EOF

	# Purge flask-kernel options
	if [ -e "${ROOT_DIR}"/etc/default/flash-kernel ] ; then
		cat << EOF > "${ROOT_DIR}"/etc/default/flash-kernel
LINUX_KERNEL_CMDLINE=
LINUX_KERNEL_CMDLINE_DEFAULTS=
EOF
	fi
}

function set_kernel_loglevel()
{
	local cmdline opts opt

	echo "-- Set kernel loglevel (${1})"

	cmdline=()
	readarray -t opts < <(head -1 "${BOOT_DIR}"/cmdline.txt | tr ' ' '\n')
	for opt in "${opts[@]}" ; do
		case "${opt}" in
			loglevel=*|ignore_loglevel|quiet) ;;  # Drop the option
			*) cmdline+=("${opt}") ;;             # Keep the option
		esac
	done
	echo "${cmdline[*]} loglevel=${1}" > "${BOOT_DIR}"/cmdline.txt

	sed -i -E 's/^(kernel\.printk[ =])/# rpi-config \1/' \
		"${ROOT_DIR}"/etc/sysctl.d/*.conf
}

function add_user()
{
	local user pubkey

	echo "-- Add user"

	for user in "${@}" ; do
		echo "--   ${user}"
		if ! grep -q "^${user}:" "${ROOT_DIR}"/etc/passwd  ; then
			useradd --root "${ROOT_DIR}" --create-home --user-group \
					--shell /bin/bash --password "$(openssl passwd -1 "${user}")" \
					"${user}"
		fi

		cat << EOF > "${ROOT_DIR}"/etc/sudoers.d/"${user}"
"${user}" ALL = NOPASSWD: ALL
EOF
		chmod 440 "${ROOT_DIR}"/etc/sudoers.d/"${user}"

		# Copy the SSH public key
		pubkey=${HERE}/../ssh/${user}.pubkey
		if [ -e "${pubkey}" ] ; then
			echo "--     Import public SSH key"
			sshdir=${ROOT_DIR}/home/${user}/.ssh
			# shellcheck disable=SC2174
			mkdir -p -m 700 "${sshdir}"
			cat "${pubkey}" >> "${sshdir}"/authorized_keys
			chmod 600 "${sshdir}"/authorized_keys
			chroot "${ROOT_DIR}" chown -R "${user}":"${user}" /home/"${user}"/.ssh
		fi
	done
}

function set_service()
{
	local action service

	action=${1}
	shift

	echo "-- ${action^} service"

	for service in "${@}" ; do
		echo "--   ${service}"
		systemctl --root="${ROOT_DIR}" "${action}" "${service}"

		# Enable pwauth for ssh
		if [ "${action}" = "enable" ] && [ "${service}" = "ssh" ] ; then
			echo "--     Enable password authentication"
			sed -i 's/^PasswordAuthentication/# rpi-config PasswordAuthentication/' \
				"${ROOT_DIR}"/etc/ssh/sshd_config
			sed -i '/^# rpi-config$/,+1d' "${ROOT_DIR}"/etc/ssh/sshd_config
			cat << EOF >> "${ROOT_DIR}"/etc/ssh/sshd_config
# rpi-config
PasswordAuthentication yes
EOF
		fi
	done
}

function enable_wifi()
{
	local wifi_ssid wifi_passphrase

	echo "-- Enable wifi"

	wifi_ssid=$(pass show local/wifi | grep '^ssid: ')
	wifi_ssid=${wifi_ssid#* }

	wifi_passphrase=$(pass show local/wifi | grep '^passphrase: ')
	wifi_passphrase=${wifi_passphrase#* }

	if [ -d "${ROOT_DIR}"/etc/netplan ] ; then
		cat << EOF > "${ROOT_DIR}"/etc/netplan/99-rpi-config.yaml
network:
    wifis:
        wlan0:
            dhcp4: true
            optional: true
            access-points:
                "${wifi_ssid}":
                    password: "${wifi_passphrase}"
EOF
	else
		cat << EOF > "${ROOT_DIR}"/etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=CH

network={
    ssid="${wifi_ssid}"
    psk="${wifi_passphrase}"
}
EOF
	fi
}

function usage()
{
	cat <<EOF
Usage: rpi-config [-h] [-r DIR]

Configure a Raspberry Pi system.

Postional arguments:
  -h, --help      Show this help text and exit.
  -r, --root DIR  Configure the system under <DIR> instead of the current
                  system.
EOF
}

HERE=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)
ROOT_DIR=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-r|--root)
			shift
			ROOT_DIR=${1}
			;;
		*)
			echo "** Error: Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

trap out EXIT INT TERM HUP

if [ -d "${ROOT_DIR}"/boot/firmware ] ; then
	BOOT_DIR=${ROOT_DIR}/boot/firmware
elif  [ -d "${ROOT_DIR}"/boot ] ; then
	BOOT_DIR=${ROOT_DIR}/boot
else
	echo "** Error: No such boot directory: ${ROOT_DIR}/boot{/firmware,}" >&2
	exit 1
fi

set_cloud_init_config
install_tools
set_hostname
set_console "console=tty1" "console=ttyAMA0,115200"
set_kernel_loglevel "8"
add_user "ubuntu" "bottle-pi"
set_service "enable" "ssh"
set_service "disable" "unattended-upgrades"
enable_wifi

# FIXME: Hack for broken Groovy
if grep -q 'groovy' "${ROOT_DIR}"/etc/lsb-release ; then
	echo "-- Hacking up Groovy"
	sed -i 's/$/ net.ifnames=0/' "${BOOT_DIR}"/cmdline.txt
fi
